
#<--BFS  Puzzle 8 GUI Tkinter-->





import tkinter as tk
import copy

goal = [
    [1, 3, 4],
    [8, 6, 2],
    [7, 0, 5]
]

class PuzzleSolverGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("BFS EASY Soultion: 6 Steps")
        self.master.geometry("300x400")

        self.current_solution_index = 0

        self.easy_puzzle = [
            [1, 2, 3],
            [8, 0, 4],
            [7, 6, 5]
        ]

        self.solution = bfs(self.easy_puzzle, goal)

        self.create_widgets()
        self.display_state(self.easy_puzzle)

    def create_widgets(self):
        self.label = tk.Label(self.master, text="             BFS     (EASY Soultion: 6 Steps)")
        self.label.pack(pady=10)

        self.canvas = tk.Canvas(self.master, width=300, height=300)
        self.canvas.pack()

        self.btn_next_step = tk.Button(self.master, text="Next Step", command=self.next_step)
        self.btn_next_step.pack(pady=10)

    def next_step(self):
        if self.current_solution_index < len(self.solution):
            self.display_state(self.solution[self.current_solution_index])
            self.current_solution_index += 1
        else:
            self.label.config(text="No more steps!")

    def display_state(self, state):
        self.canvas.delete("all")
        cell_size = 100

        for row in range(len(state)):
            for col in range(len(state[0])):
                x1, y1 = col * cell_size, row * cell_size
                x2, y2 = x1 + cell_size, y1 + cell_size

                if state[row][col] != 0:
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="lightblue")
                    self.canvas.create_text((x1 + x2) // 2, (y1 + y2) // 2, text=str(state[row][col]))
                else:
                    self.canvas.create_rectangle(x1, y1, x2, y2, fill="white")

if __name__ == "__main__":
    def get_neighboors(main):
        pos = [0, 0]
        for i in range(len(main)):
            for j in range(len(main[0])):
                if main[i][j] == 0:
                    pos = [i, j]
                    break

        neighboors = []
        # Top
        if pos[0] - 1 >= 0:
            top = copy.deepcopy(main)
            top[pos[0]][pos[1]], top[pos[0] - 1][pos[1]] = top[pos[0] - 1][pos[1]], top[pos[0]][pos[1]]
            neighboors.append(top)

        # Right
        if pos[1] + 1 <= 2:
            right = copy.deepcopy(main)
            right[pos[0]][pos[1]], right[pos[0]][pos[1] + 1] = right[pos[0]][pos[1] + 1], right[pos[0]][pos[1]]
            neighboors.append(right)

        # Down
        if pos[0] + 1 <= 2:
            down = copy.deepcopy(main)
            down[pos[0]][pos[1]], down[pos[0] + 1][pos[1]] = down[pos[0] + 1][pos[1]], down[pos[0]][pos[1]]
            neighboors.append(down)

        # Left
        if pos[1] - 1 >= 0:
            left = copy.deepcopy(main)
            left[pos[0]][pos[1]], left[pos[0]][pos[1] - 1] = left[pos[0]][pos[1] - 1], left[pos[0]][pos[1]]
            neighboors.append(left)

        return neighboors

    def bfs(start, goal):
        visited = []
        fronter = [(start, [start])]
        while len(fronter) > 0:
            curr_state, curr_path = fronter.pop(0)
            if curr_state == goal:
                return curr_path
            if curr_state not in visited:
                visited.append(curr_state)
                # Get curr neighboors
                neighboors = get_neighboors(curr_state)
                for neighboor in neighboors:
                    fronter.append((neighboor, curr_path + [neighboor]))
        return "No Solution found!"

    root = tk.Tk()
    app = PuzzleSolverGUI(root)
    root.mainloop()








